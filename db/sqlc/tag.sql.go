// Code generated by sqlc. DO NOT EDIT.
// source: tag.sql

package db

import (
	"context"
)

const addTag = `-- name: AddTag :one
INSERT INTO tag (
    name
) VALUES (
    $1
) RETURNING id, name
`

func (q *Queries) AddTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, addTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tag
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagById = `-- name: GetTagById :one
SELECT id, name
FROM tag
WHERE id = $1
`

func (q *Queries) GetTagById(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagById, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTag = `-- name: ListTag :many
SELECT id, name
FROM tag
ORDER BY id ASC
`

func (q *Queries) ListTag(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameTag = `-- name: RenameTag :exec
UPDATE tag SET
    name = $2
WHERE id = $1
`

type RenameTagParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) RenameTag(ctx context.Context, arg RenameTagParams) error {
	_, err := q.db.ExecContext(ctx, renameTag, arg.ID, arg.Name)
	return err
}
